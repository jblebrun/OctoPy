# Ball and region set, moved by moveball.
:alias bx v0
:alias by v1
:alias dx v2
:alias dy v3
:alias top v4
:alias left v5
:alias right v6
:alias bottom v7


:alias sign vf
:alias tmp vd

:macro m bn {
    i := bn
    load v7
    moveball
    i := bn
    save v7
    load v7
}


:macro init bn {
    i := bn
    load v7
    i := dot
    sprite bx by 1
}


: main
    init b1
    init b2
    init b3
    init b4
    init b5
    init b6
    init b7
    init b8

    loop
        v5 := delay

        if v5 == 0 begin
            m b1
            m b2
            m b3
            m b4
            m b5
            m b6
            m b7
            m b8
            v5 := 0
            delay := v5
        end

    again



### Boundary crossing notes:
# The math is simple, and we can use the same pattern for both directions, 
# but there's a lot to keep track of.
# Consider the x dimension:
# We are either moving left (decreasing) or moving right (increasing).
#
# First, we subtract the boundary from the coordinate, so that we're working
# relative to a boundary of 0.
#
# Now, we add the speed to the coordinate.
# 
# The movement results in a crossing based on the value of the vf carry flag. BUT, 
# the value expect depends on the direction of movement. If we were moving left,
# Then when we cross, we expect to *not* get the carry flag.
# For example:
#   x = 5, dx = -2, left = 4. 
#   We adjusted for the boundary, so x = 1.
#   x + dx ->   
#   1 + -2 -> 
#   0x01 + 0xFE -> 0xFF. Note that there was no carry!
#   In other words, adding -2 gives the same vf as subtracting 2. 
#
#   For a non cross:
#   x = 5 dx = -1 left = 3
#   x = 2 after bounds adjust.
#   x + dx -> 2 + -2 -> 0x02 + 0xFE -> 0x00 -- a carry!
#
#   We only check left bound when moving left and right bound when moving right, so 
#   there's no need for the math to work out on the opposite boundaries (and no need 
#  do those pointless checks).



### Single macro to handle bounds check.
# coord: the current value of the coordinate checked
# velo: the speed along the dimension
# bound: the bound we are checking against
# expect: the carry flag the indicates a hit (see notes above)
:macro checkbound coord velo bound hitwhencarryis {
    # do math to calculate a boundary crossing.
    coord -= bound
    coord += velo
    if vf == hitwhencarryis begin 
        # clip to bound
        coord := bound
        # negate velocity
        tmp := 0
        velo =- tmp
        # TODO - maybe random it up a little?
    else
        coord += bound
    end	
}

### Call the appropriate checkbound for a coordinate
:macro ud2 coordinate velocity boundStart boundEnd {
    # Find sign of velocity
    # Shifts left one, MSB goes into vF (sign)
    # We're ready for both shift behaviors!
    sign := velocity
    sign <<= velocity

    if sign == 1 begin
        # We are moving to the left, or up (decreasing coord)
        # So check for corssing the start/minimum boundary
        checkbound coordinate velocity boundStart 0
        else 
        # We are moving to the right, or down (increasing coord)
        # So check for corssing the end/maximum boundary
        checkbound coordinate velocity boundEnd 1
    end
}

# WHY IS IT SO HARD TO BOUNCE A BALL
: moveball

    va := bx
    vb := by
    #sprite bx by 1

    ud2 bx dx left right
    ud2 by dy top bottom

: db
    i := dot
    sprite va vb 1
    sprite bx by 1
;

# repack as 
# x dx l r y dy t b
# So we can do smaller loads
: dot
    0x80
: b1
    3 3 -1 3 0 0 31 15
: b2
    35 11 2 3 0 32 63 15
: b3
    17 21 1 2 16 0 31 31
: b4
    45 20 -1 -2 15 31 63 31
: b5
    0 0 1 1 0 0 63 31
: b6
    0 0 2 2 0 0 63 31
: b7
    0 0 -3 1 0 0 63 31
: b8
    0 0 -2 -2 0 0 63 31

